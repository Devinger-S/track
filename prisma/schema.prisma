generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Activity {
  id        String    @id @default(dbgenerated("concat('act_', replace((gen_random_uuid())::text, '-'::text, ''::text))"))
  name      String?
  startAt   DateTime
  endAt     DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime
  tenantId  String
  userId    String
  clientId  String?
  projectId String?
  Client    Client?   @relation(fields: [clientId], references: [id])
  Project   Project?  @relation(fields: [projectId], references: [id])
  Tenant    Tenant    @relation(fields: [tenantId], references: [id])
  User      User      @relation(fields: [userId], references: [id])
}

model Client {
  id        String     @id @default(dbgenerated("concat('cli_', replace((gen_random_uuid())::text, '-'::text, ''::text))"))
  name      String
  color     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime
  tenantId  String
  Activity  Activity[]
  Tenant    Tenant     @relation(fields: [tenantId], references: [id])
  Project   Project[]
}

model Project {
  id        String     @id @default(dbgenerated("concat('prj_', replace((gen_random_uuid())::text, '-'::text, ''::text))"))
  name      String
  color     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime
  tenantId  String
  clientId  String?
  Activity  Activity[]
  Client    Client?    @relation(fields: [clientId], references: [id])
  Tenant    Tenant     @relation(fields: [tenantId], references: [id])
}

model Tenant {
  id               String     @id @default(dbgenerated("concat('tnt_', replace((gen_random_uuid())::text, '-'::text, ''::text))"))
  name             String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime
  stripeCustomerId String?
  plan             Plan       @default(FREE)
  expirationDate   DateTime?
  inviteKey        String     @unique @default(dbgenerated("replace((gen_random_uuid())::text, '-'::text, ''::text)"))
  Activity         Activity[]
  Client           Client[]
  Project          Project[]
  User             User[]
}

model User {
  id        String     @id @default(dbgenerated("concat('usr_', replace((gen_random_uuid())::text, '-'::text, ''::text))"))
  email     String     @unique
  name      String?
  avatar    String?
  role      Role       @default(VIEWER)
  createdAt DateTime   @default(now())
  updatedAt DateTime
  tenantId  String
  Activity  Activity[]
  Tenant    Tenant     @relation(fields: [tenantId], references: [id])
}

enum Plan {
  FREE
  PRO
}

enum Role {
  OWNER
  ADMIN
  BILLING
  USER
  TRACKER
  VIEWER
}
