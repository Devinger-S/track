generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider = "postgresql"
  // Uses connection pooling
  url = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  // directUrl = env("POSTGRES_URL_NON_POOLING")
}
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  activity Activity[]
  client Client[]
  project Project[]
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Activity {
  id        String    @id @default(dbgenerated("concat('act_', replace((gen_random_uuid())::text, '-'::text, ''::text))"))
  name      String?
  startAt   DateTime
  endAt     DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime
  userId    String 
  clientId  String?
  projectId String?
  client    Client?   @relation(fields: [clientId], references: [id])
  project   Project?  @relation(fields: [projectId], references: [id])
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model Client {
  id        String     @id @default(dbgenerated("concat('cli_', replace((gen_random_uuid())::text, '-'::text, ''::text))"))
  name      String
  userId    String 
  color     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  activity  Activity[]
  project   Project[]
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id        String     @id @default(dbgenerated("concat('prj_', replace((gen_random_uuid())::text, '-'::text, ''::text))"))
  name      String
  color     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String 
  clientId  String?
  activity  Activity[]
  client    Client?   @relation(fields: [clientId], references: [id])
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Plan {
  FREE
  PRO
}

enum Role {
  OWNER
  ADMIN
  BILLING
  USER
  TRACKER
  VIEWER
}
